{"version":3,"sources":["channel.service.ts","ConsumerPage.tsx","Consumer.tsx","ProducerPage.tsx","Producer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["socketHost","process","ChannelService","Phoenix","Object","classCallCheck","this","channels","socket","connect","open","bind","send","subscribe","createClass","key","value","channel","join","receive","console","log","concat","topic","response","error","params","arguments","length","undefined","event","payload","onData","onError","Error","_onError","push","_this2","on","off","ConsumerPage","props","contestants","keys","map","k","react","className","type","onClick","castVoteFor","active","name","defaultValue","username","onChange","contest","joinContest","status","Consumer","_React$Component","_this","possibleConstructorReturn","getPrototypeOf","call","state","score","subscriptions","assertThisInitialized","handleInputChange","onVotingComplete","setContestants","inherits","forEach","unsub","onCastVoteSuccessFor","_this3","_event$target","target","setState","defineProperty","reason","src_ConsumerPage","React","ProducerPage","scores","createContest","Producer","sendCreateContest","onScoreChange","updateScore","onCreateSuccessFor","src_ProducerPage","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5237eb5.chunk.js","sourcesContent":["import * as Phoenix from 'phoenix';\nconst socketHost = process.env.REACT_APP_SOCKET_URL || 'ws://localhost:4000/socket';\n\nexport class Channel extends Phoenix.Channel {\n  // define add'l props on imported type\n  topic?: string = '';\n}\ntype ResponseHandler = (response?: any) => any;\n\nexport class ChannelService {\n  channels: { [key: string]: Channel } = {};\n  socket: Phoenix.Socket;\n\n  constructor() {\n    const socket = new Phoenix.Socket(socketHost);\n    socket.connect();\n    this.socket = socket;\n\n    this.open = this.open.bind(this);\n    this.send = this.send.bind(this);\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  join(channel: Channel) {\n    channel.join()\n      .receive('ok', () => {\n        console.log(`Joined ${channel.topic} successfully!`);\n       })\n      .receive('error', (response: any) => {\n        console.error(`Unable to join ${channel.topic}:`, response);\n       });\n  }\n\n  _onError(response: any) {\n    console.error('Message failed', response);\n  }\n\n  open(topic: string, params = {}) {\n    this.channels[topic] = this.socket.channel(topic, params);\n    this.join(this.channels[topic]);\n    return this.channels[topic];\n  }\n\n  send(\n    topic: string,\n    event: string,\n    payload: string | any,\n    onData: ResponseHandler,\n    onError?: ResponseHandler\n  ) {\n    if (!this.channels[topic]) {\n      throw new Error(`No channel for topic ${topic}`);\n    }\n\n    onError = onError || this._onError;\n    this.channels[topic].push(event, payload)\n      .receive('ok', onData)\n      .receive('error', onError);\n  }\n\n  subscribe(topic: string, event: string, onData: ResponseHandler) {\n    if (!this.channels[topic]) {\n      throw new Error(`No channel for topic ${topic}`);\n    }\n\n    this.channels[topic].on(event, onData);\n    return () => this.channels[topic].off(event);\n  }\n}\n\nexport default ChannelService;\n","import * as React from 'react';\nimport { ButtonHandler, InputHandler, Score } from './types';\n\nexport interface Props {\n  active: boolean;\n  castVoteFor: (contestantName: string) => ButtonHandler;\n  contest: string;\n  contestants: any;\n  joinContest: ButtonHandler;\n  onChange: InputHandler;\n  score: Score;\n  status: string;\n  username: string;\n}\n\nexport function ConsumerPage(props: Props) {\n  const contestants = Object.keys(props.contestants).map(k => {\n    return (\n      <div className=\"form-group\" key={k}>\n        <button type=\"button\" className=\"primary\" onClick={props.castVoteFor(k)} key={k}>\n          {props.contestants[k]}\n        </button>\n      </div>\n    );\n  });\n\n  return (\n    <section>\n      {props.active || <div>\n        <div className=\"form-group\">\n          <label>Your name</label>\n          <input type=\"text\"\n            name=\"username\"\n            defaultValue={props.username}\n            onChange={props.onChange}/>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Contest name</label>\n          <input type=\"text\"\n            name=\"contest\"\n            defaultValue={props.contest}\n            onChange={props.onChange}/>\n        </div>\n\n        <button type=\"button\" onClick={props.joinContest}>Join</button>\n      </div>}\n\n      {props.active && <div>\n        <h2>{props.contest}</h2>\n        <h4>Which is better?</h4>\n        {contestants}\n      </div>}\n      <h4 className=\"status\">{props.status}</h4>\n    </section>\n  );\n}\n\nexport default ConsumerPage;\n","import * as React from 'react';\nimport ChannelService from './channel.service';\nimport ConsumerPage from './ConsumerPage';\nimport { ButtonHandler, InputEvent, FormContainer, Score } from './types';\n\nexport interface Props {}\n\nexport interface State {\n  active: boolean;\n  channel: ChannelService;\n  contest: string;\n  contestants: {[key: string]: string};\n  score: Score;\n  status: string;\n  subscriptions: Function[];\n  topic: string;\n  username: string;\n}\n\nexport class Consumer extends React.Component<Props, State> implements FormContainer {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      active: false,\n      channel: new ChannelService(),\n      contest: '',\n      contestants: {},\n      score: {},\n      status: '',\n      subscriptions: [],\n      topic: '',\n      username: ''\n    };\n\n    this.castVoteFor = this.castVoteFor.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.joinContest = this.joinContest.bind(this);\n    this.onError = this.onError.bind(this);\n    this.onVotingComplete = this.onVotingComplete.bind(this);\n    this.setContestants = this.setContestants.bind(this);\n  }\n\n  componentWillUnmount() {\n    this.state.subscriptions.forEach((unsub: Function) => unsub());\n  }\n\n  castVoteFor(name: string): ButtonHandler {\n    return () => this.state.channel.send(\n      this.state.topic, 'cast_vote', { name: name }, this.onCastVoteSuccessFor(name)\n    );\n  }\n\n  onCastVoteSuccessFor(name: string): () => void {\n    return () => this.state.channel.send(\n      this.state.topic, 'get_contestants', null, this.setContestants\n    );\n  }\n\n  handleInputChange(event: InputEvent): void {\n    const { name, value } = event.target;\n    this.setState({ [name]: value } as unknown as Pick<State, keyof State>);\n  }\n\n  joinContest(): void {\n    if (!this.state.contest) throw new Error('Enter a contest name!');\n    if (!this.state.username) throw new Error('Enter your name!');\n    const topic = `contest:voter:${this.state.contest}`;\n    this.setState({ active: true, topic });\n\n    this.state.channel.open(topic, { username: this.state.username });\n    this.state.channel.subscribe(\n      topic, 'voting_complete', this.onVotingComplete.bind(this)\n    );\n    this.state.channel.send(topic, 'get_contestants', null, this.setContestants, this.onError);\n  }\n\n  onError(error: any) {\n    this.setState({ status: error.reason });\n  }\n\n  onVotingComplete(): void {\n    this.setState({ active: false });\n  }\n\n  render() {\n    return (\n      <ConsumerPage\n        active={this.state.active}\n        castVoteFor={this.castVoteFor}\n        contest={this.state.contest}\n        contestants={this.state.contestants}\n        joinContest={this.joinContest}\n        onChange={this.handleInputChange}\n        score={this.state.score}\n        status={this.state.status}\n        username={this.state.username}/>\n    );\n  }\n\n  setContestants(contestants: any) {\n    this.setState({ contestants });\n  }\n}\n\nexport default Consumer;\n","import * as React from 'react';\nimport { ButtonHandler, InputHandler, Score } from './types';\n\nexport interface Props {\n  createContest: ButtonHandler;\n  onChange: InputHandler;\n  score: Score;\n  status: string;\n}\n\nexport function ProducerPage(props: Props) {\n  const scores = Object.keys(props.score).map(k => {\n    return (<li key={k}>{k}: {props.score[k]}</li>);\n  });\n\n  return (\n    <section>\n      <h2>Moderator</h2>\n\n      <div className=\"form-group\">\n        <label>Contest name</label>\n        <input type=\"text\"\n          name=\"contest\"\n          onChange={props.onChange}/>\n      </div>\n      <button type=\"button\" onClick={props.createContest}>\n        Create contest\n      </button>\n      <h4 className=\"status\">{props.status}</h4>\n\n      {scores.length > 0 && <div>\n        <h2>Scores</h2>\n        <ul>\n          {scores}\n        </ul>\n      </div>}\n    </section>\n  );\n}\n\nexport default ProducerPage;\n","import * as React from 'react';\nimport { InputEvent, Score } from './types';\nimport ChannelService from './channel.service';\nimport ProducerPage from './ProducerPage';\n\nexport interface Props {}\n\nexport interface State {\n  channel: ChannelService;\n  contest: string;\n  score: Score;\n  status: string;\n  topic: string;\n  username: string;\n}\n\nexport class Producer extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      channel: new ChannelService(),\n      contest: '',\n      score: {},\n      status: '',\n      topic: '',\n      username: 'admin1'\n    };\n\n    this.sendCreateContest = this.sendCreateContest.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.onScoreChange = this.onScoreChange.bind(this);\n    this.updateScore = this.updateScore.bind(this);\n    this.createContest = this.createContest.bind(this);\n  }\n\n  createContest(): void {\n    const contestants = ['A', 'B', 'C', 'D'];\n    const name = this.state.contest;\n    const topic = `contest:moderator:${name}`;\n    this.setState({ topic });\n    this.state.channel.open(topic, { username: this.state.username });\n    this.sendCreateContest(name, contestants, topic);\n  }\n\n  sendCreateContest(name: string, contestants: string[], topic: string): void {\n    this.state.channel.send(\n      topic, 'create', { name, contestants }, this.onCreateSuccessFor(name)\n    );\n\n    this.state.channel.subscribe(\n      topic || this.state.topic, 'score_change', this.onScoreChange.bind(this)\n    );\n  }\n\n  handleInputChange(event: InputEvent): void {\n    const { name, value } = event.target;\n    this.setState({ [name]: value } as unknown as Pick<State, keyof State>);\n  }\n\n  onCreateSuccessFor(name: any): () => void {\n    return () => this.setState({ status: `Created contest '${name}'` });\n  }\n\n  onScoreChange(score: Score): void {\n    this.state.channel.send(\n      this.state.topic, 'get_scores', null, this.updateScore\n    );\n  }\n\n  render() {\n    return (\n      <ProducerPage\n        createContest={this.createContest}\n        onChange={this.handleInputChange}\n        score={this.state.score}\n        status={this.state.status}/>\n    );\n  }\n\n  updateScore(score: Score) {\n    this.setState({ score });\n  }\n}\n\nexport default Producer;\n","import * as React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Consumer from './Consumer';\nimport Producer from './Producer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* <header className=\"App-header\">\n          <ul>\n            <li>\n              <Link to=\"/producer\">Moderator</Link>\n            </li>\n            <li>\n              <Link to=\"/consumer\">Voter</Link>\n            </li>\n          </ul>\n        </header> */}\n        <div className=\"main\">\n          <h1 className=\"page-header\">Rnkr</h1>\n          <Route exact path=\"/\" component={Consumer}/>\n          <Route path=\"/voter\" component={Consumer}/>\n          <Route path=\"/moderator\" component={Producer}/>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}